{"version":3,"sources":["store.js","reducers/productReducers.js","constants/productConstants.js","reducers/cartReducers.js","constants/cartConstants.js","reducers/userReducers.js","constants/userConstants.js","reducers/orderReducers.js","constants/orderConstants.js","constants/api.js","components/Header.js","actions/userActions.js","components/Footer.js","components/Rating.js","components/Product.js","components/Message.js","components/Loader.js","screens/Home.js","actions/productActions.js","screens/Product.js","actions/cartActions.js","screens/Cart.js","components/FormContainer.js","screens/Login.js","screens/Register.js","screens/Profile.js","actions/orderActions.js","components/CheckoutSteps.js","screens/Shipping.js","screens/Payment.js","screens/PlaceOrder.js","screens/Order.js","utils/history.js","App.js","serviceWorker.js","index.js"],"names":["reducer","combineReducers","productList","state","products","action","type","loading","payload","error","productDetails","product","reviews","cart","cartItems","shippingAddress","item","existItem","find","x","map","filter","paymentMethod","userLogin","userInfo","userRegister","userDetails","user","userUpdateProfile","success","createOrder","order","orderDetails","orderItems","orderPay","orderListUser","orders","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","initialState","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","URL","Header","dispatch","useDispatch","useSelector","Navbar","bg","variant","expand","collapseOnSelect","Container","to","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","name","Item","onClick","removeItem","Footer","Row","Rating","value","text","color","style","defaultProps","Product","Card","_id","Img","src","image","Body","Title","as","Text","rating","numReviews","price","Message","children","Alert","Loader","Spinner","animation","role","width","height","margin","display","Home","useEffect","a","axios","get","data","response","message","Col","key","sm","md","lg","xl","ProductScreen","history","match","useState","qty","setQty","params","Image","alt","fluid","ListGroup","description","countInStock","Form","Control","onChange","e","target","Array","keys","p","Button","disabled","push","addToCart","getState","setItem","stringify","Cart","location","productId","search","Number","split","removeFromCartHandler","removeFromCart","length","rounded","reduce","acc","toFixed","FormContainer","xs","Login","email","setEmail","password","setPassword","redirect","onSubmit","preventDefault","config","headers","post","login","Group","controlId","Label","placeholder","Register","setName","confirmPassword","setConfirmPassword","setMessage","register","Profile","loadingOrders","errorOrders","Authorization","token","put","updateUserProfile","Table","striped","bordered","hover","responsive","createdAt","substring","totalPrice","isPaid","paidAt","isDelivered","deliveredAt","CheckoutSteps","step1","step2","step3","step4","Shipping","address","setAddress","city","setCity","postalCode","setPostalCode","country","setCountry","required","Payment","setPaymentMethod","Check","label","checked","PlaceOrder","addDecimals","num","Math","round","itemsPrice","shippingPrice","taxPrice","orderCreate","index","console","log","Order","orderId","sdkReady","setSdkReady","loadingPay","successPay","addPayPalScript","clientId","script","document","createElement","async","onload","body","appendChild","getOrderDetails","window","paypal","amount","onSuccess","paymentResult","payOrder","createBrowserHistory","App","path","component","OrderScreen","PlaceOrderScreen","PaymentScreen","ShippingScreen","RegisterScreen","ProfileScreen","LoginScreen","CartScreen","HomeScreen","exact","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.326d18b8.chunk.js","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\n// Reducers\r\nimport {\r\n    productListReducer,\r\n    productDetailsReducer,\r\n} from './reducers/productReducers'\r\nimport { cartReducer } from './reducers/cartReducers'\r\nimport {\r\n    userLoginReducer,\r\n    userRegisterReducer,\r\n    userDetailsReducer,\r\n    userUpdateProfileReducer,\r\n} from './reducers/userReducers'\r\nimport {\r\n    createOrderReducer,\r\n    orderDetailsReducer,\r\n    orderListUserReducer,\r\n    orderPayReducer,\r\n} from './reducers/orderReducers'\r\n\r\nconst reducer = combineReducers({\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    cart: cartReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n    createOrder: createOrderReducer,\r\n    orderDetails: orderDetailsReducer,\r\n    orderPay: orderPayReducer,\r\n    orderListUser: orderListUserReducer,\r\n})\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\r\n    ? JSON.parse(localStorage.getItem('cartItems'))\r\n    : []\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n    ? JSON.parse(localStorage.getItem('userInfo'))\r\n    : null\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress')\r\n    ? JSON.parse(localStorage.getItem('shippingAddress'))\r\n    : {}\r\n\r\n// Load initial state when the application is loaded\r\nconst initialState = {\r\n    cart: {\r\n        cartItems: cartItemsFromStorage,\r\n        shippingAddress: shippingAddressFromStorage,\r\n    },\r\n    userLogin: { userInfo: userInfoFromStorage },\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store\r\n","import {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n} from '../constants/productConstants'\r\n\r\n// Getting products from server\r\nexport const productListReducer = (state = { products: [] }, action) => {\r\n    switch (action.type) {\r\n        case PRODUCT_LIST_REQUEST:\r\n            return {\r\n                loading: true,\r\n                products: [],\r\n            }\r\n        case PRODUCT_LIST_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                products: action.payload,\r\n            }\r\n        case PRODUCT_LIST_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Get products details\r\nexport const productDetailsReducer = (\r\n    state = { product: { reviews: [] } },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case PRODUCT_DETAILS_REQUEST:\r\n            return {\r\n                loading: true,\r\n                ...state,\r\n            }\r\n        case PRODUCT_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                product: action.payload,\r\n            }\r\n        case PRODUCT_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const PRODUCT_LIST_REQUEST = 'PRODUCT_LIST_REQUEST'\r\nexport const PRODUCT_LIST_SUCCESS = 'PRODUCT_LIST_SUCCESS'\r\nexport const PRODUCT_LIST_FAIL = 'PRODUCT_LIST_FAIL'\r\n\r\nexport const PRODUCT_DETAILS_REQUEST = 'PRODUCT_DETAILS_REQUEST'\r\nexport const PRODUCT_DETAILS_SUCCESS = 'PRODUCT_DETAILS_SUCCESS'\r\nexport const PRODUCT_DETAILS_FAIL = 'PRODUCT_DETAILS_FAIL'\r\n","import { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD } from '../constants/cartConstants'\r\n\r\nexport const cartReducer = (state = { cartItems: [], shippingAddress: {} }, action) => {\r\n    switch (action.type) {\r\n        case CART_ADD_ITEM:\r\n            const item = action.payload\r\n            const existItem = state.cartItems.find(\r\n                (x) => x.product === item.product\r\n            )\r\n\r\n            if (existItem) {\r\n                return {\r\n                    ...state,\r\n                    cartItems: state.cartItems.map((x) =>\r\n                        x.product === existItem.product ? item : x\r\n                    ),\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    cartItems: [...state.cartItems, item],\r\n                }\r\n            }\r\n        case CART_REMOVE_ITEM:\r\n            return {\r\n                ...state,\r\n                cartItems: state.cartItems.filter(\r\n                    (x) => x.product !== action.payload\r\n                ),\r\n            }\r\n        case CART_SAVE_SHIPPING_ADDRESS:\r\n            return {\r\n                ...state,\r\n                shippingAddress: action.payload,\r\n            }\r\n        case CART_SAVE_PAYMENT_METHOD:\r\n            return {\r\n                ...state,\r\n                paymentMethod: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const CART_ADD_ITEM = 'CART_ADD_ITEM'\r\nexport const CART_REMOVE_ITEM = 'CART_REMOVE_ITEM'\r\nexport const CART_SAVE_SHIPPING_ADDRESS = 'CART_SAVE_SHIPPING_ADDRESS'\r\n\r\nexport const CART_SAVE_PAYMENT_METHOD = 'CART_SAVE_PAYMENT_METHOD'","import {\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_RESET,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGOUT,\r\n    USER_REGISTER_FAIL,\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n} from '../constants/userConstants'\r\n\r\n// Getting a user from server\r\nexport const userLoginReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_LOGIN_REQUEST:\r\n            return {\r\n                loading: true,\r\n            }\r\n        case USER_LOGIN_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                userInfo: action.payload,\r\n            }\r\n        case USER_LOGIN_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        case USER_LOGOUT:\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userRegisterReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_REGISTER_REQUEST:\r\n            return {\r\n                loading: true,\r\n            }\r\n        case USER_REGISTER_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                userInfo: action.payload,\r\n            }\r\n        case USER_REGISTER_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        case USER_LOGOUT:\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userDetailsReducer = (state = { user: {} }, action) => {\r\n    switch (action.type) {\r\n        case USER_DETAILS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        case USER_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                user: action.payload,\r\n            }\r\n        case USER_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        case USER_DETAILS_RESET:\r\n            return {\r\n                user: {},\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userUpdateProfileReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_UPDATE_PROFILE_REQUEST:\r\n            return {\r\n                loading: true,\r\n            }\r\n        case USER_UPDATE_PROFILE_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true,\r\n                userInfo: action.payload,\r\n            }\r\n        case USER_UPDATE_PROFILE_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST'\r\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS'\r\nexport const USER_LOGIN_FAIL = 'USER_LOGIN_FAIL'\r\n\r\nexport const USER_LOGOUT = 'USER_LOGOUT'\r\n\r\nexport const USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST'\r\nexport const USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS'\r\nexport const USER_REGISTER_FAIL = 'USER_REGISTER_FAIL'\r\n\r\nexport const USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST'\r\nexport const USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS'\r\nexport const USER_DETAILS_FAIL = 'USER_DETAILS_FAIL'\r\nexport const USER_DETAILS_RESET = 'USER_DETAILS_RESET'\r\n\r\nexport const USER_UPDATE_PROFILE_REQUEST = 'USER_DETAILS_PROFILE_REQUEST'\r\nexport const USER_UPDATE_PROFILE_SUCCESS = 'USER_UPDATE_PROFILE_SUCCESS'\r\nexport const USER_UPDATE_PROFILE_FAIL = 'USER_UPDATE_PROFILE_FAIL'\r\nexport const USER_UPDATE_PROFILE_RESET = 'USER_UPDATE_PROFILE_RESET'\r\n","import {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_RESET,\r\n    ORDER_LIST_USER_REQUEST,\r\n    ORDER_LIST_USER_SUCCESS,\r\n    ORDER_LIST_USER_FAIL,\r\n    ORDER_LIST_USER_RESET,\r\n    ORDER_CREATE_RESET,\r\n} from '../constants/orderConstants'\r\n\r\nexport const createOrderReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case ORDER_CREATE_REQUEST:\r\n            return {\r\n                loading: true,\r\n            }\r\n        case ORDER_CREATE_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true,\r\n                order: action.payload,\r\n            }\r\n        case ORDER_CREATE_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        case ORDER_CREATE_RESET:\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const orderDetailsReducer = (\r\n    state = { loading: true, orderItems: [], shippingAddress: {} },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case ORDER_DETAILS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        case ORDER_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                order: action.payload,\r\n            }\r\n        case ORDER_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const orderPayReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case ORDER_PAY_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        case ORDER_PAY_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true,\r\n                order: action.payload,\r\n            }\r\n        case ORDER_PAY_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        case ORDER_PAY_RESET:\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const orderListUserReducer = (state = { orders: [] }, action) => {\r\n    switch (action.type) {\r\n        case ORDER_LIST_USER_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        case ORDER_LIST_USER_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                orders: action.payload,\r\n            }\r\n        case ORDER_LIST_USER_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        case ORDER_LIST_USER_RESET:\r\n            return {\r\n                orders: [],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const ORDER_CREATE_REQUEST = 'ORDER_CREATE_REQUEST'\r\nexport const ORDER_CREATE_SUCCESS = 'ORDER_CREATE_SUCCESS'\r\nexport const ORDER_CREATE_FAIL = 'ORDER_CREATE_FAIL'\r\nexport const ORDER_CREATE_RESET = 'ORDER_CREATE_RESET'\r\n\r\nexport const ORDER_DETAILS_REQUEST = 'ORDER_DETAILS_REQUEST'\r\nexport const ORDER_DETAILS_SUCCESS = 'ORDER_DETAILS_SUCCESS'\r\nexport const ORDER_DETAILS_FAIL = 'ORDER_DETAILS_FAIL'\r\n\r\nexport const ORDER_PAY_REQUEST = 'ORDER_PAY_REQUEST'\r\nexport const ORDER_PAY_SUCCESS = 'ORDER_PAY_SUCCESS'\r\nexport const ORDER_PAY_FAIL = 'ORDER_PAY_FAIL'\r\nexport const ORDER_PAY_RESET = 'ORDER_PAY_RESET'\r\n\r\nexport const ORDER_LIST_USER_REQUEST = 'ORDER_LIST_USER_REQUEST'\r\nexport const ORDER_LIST_USER_SUCCESS = 'ORDER_LIST_USER_SUCCESS'\r\nexport const ORDER_LIST_USER_FAIL = 'ORDER_LIST_USER_FAIL'\r\nexport const ORDER_LIST_USER_RESET = 'ORDER_LIST_USER_REST'\r\n","//export const URL = 'http://localhost:8000'\r\nexport const URL = 'https://arc-mobile-api.herokuapp.com'","import React from 'react'\r\n// Bootstrap UI Components\r\nimport { Navbar, Nav, Container, NavDropdown } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n// React Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// Redux User Actions\r\nimport { logout } from '../actions/userActions'\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <Navbar\r\n                    bg='primary'\r\n                    variant='dark'\r\n                    expand='lg'\r\n                    collapseOnSelect\r\n                >\r\n                    <Container>\r\n                        <LinkContainer to='/'>\r\n                            <Navbar.Brand>Arc Mobile App</Navbar.Brand>\r\n                        </LinkContainer>\r\n                        <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n                        <Navbar.Collapse id='basic-navbar-nav'>\r\n                            <Nav className='ml-auto'>\r\n                                <LinkContainer to='/cart'>\r\n                                    <Nav.Link>\r\n                                        <i className='fa fa-shopping-cart mr-2'></i>\r\n                                        Cart\r\n                                    </Nav.Link>\r\n                                </LinkContainer>\r\n                                {userInfo ? (\r\n                                    <NavDropdown\r\n                                        title={userInfo.name}\r\n                                        id='username'\r\n                                    >\r\n                                        <LinkContainer to='/profile'>\r\n                                            <NavDropdown.Item>\r\n                                                Profile\r\n                                            </NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                        <NavDropdown.Item\r\n                                            onClick={logoutHandler}\r\n                                        >\r\n                                            Logout\r\n                                        </NavDropdown.Item>\r\n                                    </NavDropdown>\r\n                                ) : (\r\n                                    <LinkContainer to='/login'>\r\n                                        <Nav.Link>\r\n                                            <i className='fa fa-user mr-2'></i>\r\n                                            Sign In\r\n                                        </Nav.Link>\r\n                                    </LinkContainer>\r\n                                )}\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { URL } from '../constants/api'\r\nimport {\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGOUT,\r\n    USER_REGISTER_FAIL,\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_DETAILS_RESET,\r\n} from '../constants/userConstants'\r\nimport { ORDER_LIST_USER_RESET } from '../constants/orderConstants'\r\nimport axios from 'axios'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST,\r\n        })\r\n\r\n        // Header to send with the request\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }\r\n\r\n        // Make request to server and get the response data\r\n        const { data } = await axios.post(\r\n            `${URL}/api/users/login`,\r\n            { email, password },\r\n            config\r\n        )\r\n\r\n        // Dispatch user login success after making the request\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n        // Set user data to local storage\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    localStorage.removeItem('cartItems')\r\n    localStorage.removeItem('shippingAddress')\r\n    localStorage.removeItem('paymentMethod')\r\n    dispatch({\r\n        type: USER_LOGOUT,\r\n    })\r\n\r\n    dispatch({\r\n        type: USER_DETAILS_RESET,\r\n    })\r\n\r\n    dispatch({\r\n        type: ORDER_LIST_USER_RESET,\r\n    })\r\n}\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST,\r\n        })\r\n\r\n        // Header to send with the request\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }\r\n\r\n        // Make request to server and get the response data\r\n        const { data } = await axios.post(\r\n            `${URL}/api/users`,\r\n            { name, email, password },\r\n            config\r\n        )\r\n\r\n        // Dispatch user register success after making the request\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data,\r\n        })\r\n        // Login in the user as well after registering\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n        // Set user data to local storage\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST,\r\n        })\r\n\r\n        // Get user login and user info\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        // Header to send with the request\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        // Make request to server and get the response data\r\n        const { data } = await axios.get(`${URL}/api/users/${id}`, config)\r\n\r\n        // Dispatch user register success after making the request\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST,\r\n        })\r\n\r\n        // Get user login and user info\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        // Header to send with the request\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        // Make request to server and get the response data\r\n        const { data } = await axios.put(`${URL}/api/users/profile`, user, config)\r\n\r\n        // Dispatch user register success after making the request\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Container, Row } from 'react-bootstrap'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <Container>\r\n        <Row className='text-center py-3'>Copyright &copy; E-Comm Store</Row>\r\n      </Container>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Rating = ({ value, text, color }) => {\r\n    return (\r\n        <div className='rating'>\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 1\r\n                            ? 'fas fa-star'\r\n                            : value > 0.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 2\r\n                            ? 'fas fa-star'\r\n                            : value > 1.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 3\r\n                            ? 'fas fa-star'\r\n                            : value > 2.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 4\r\n                            ? 'fas fa-star'\r\n                            : value > 3.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 5\r\n                            ? 'fas fa-star'\r\n                            : value > 4.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span>{text && text}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Default value for color\r\nRating.defaultProps = {\r\n    color: '#f8e825',\r\n}\r\n\r\nRating.propTypes = {\r\n    value: PropTypes.number.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    color: PropTypes.string,\r\n}\r\n\r\nexport default Rating\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport Rating from './Rating'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Product = ({ product }) => {\r\n    return (\r\n        <Card className='my-3 p-3 rounded'>\r\n            <Link to={`/product/${product._id}`}>\r\n                <Card.Img src={product.image} variant='top' />\r\n            </Link>\r\n            <Card.Body>\r\n                <Link to={`/product/${product._id}`}>\r\n                    <Card.Title as='div'>\r\n                        <strong>{product.name}</strong>\r\n                    </Card.Title>\r\n                </Link>\r\n                <Card.Text as='div'>\r\n                    <Rating\r\n                        value={product.rating}\r\n                        text={`${product.numReviews} reviews`}\r\n                    />\r\n                </Card.Text>\r\n                <Card.Text as='h3'>${product.price}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Product\r\n","import React from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\n\r\nconst Message = ({ variant, children }) => {\r\n    return <Alert variant={variant}>{children}</Alert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info',\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <Spinner\r\n            animation='border'\r\n            role='status'\r\n            style={{\r\n                width: '100px',\r\n                height: '100px',\r\n                margin: 'auto',\r\n                display: 'block',\r\n            }}\r\n        >\r\n            <span className='sr-only'>Loading</span>\r\n        </Spinner>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\n// Components\r\nimport Product from '../components/Product'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\n// Redux\r\nimport { listProducts } from '../actions/productActions'\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch()\r\n    // Grab the data from the state\r\n    const productList = useSelector((state) => state.productList)\r\n    const { loading, error, products } = productList\r\n\r\n    // Whatever is put inside the useEffect function will run as soon as the component loads.\r\n    useEffect(() => {\r\n        // Dispatch the list products action and fill our state\r\n        dispatch(listProducts())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <h1>Latest products</h1>\r\n            {loading ? (\r\n                <Loader />\r\n            ) : error ? (\r\n                <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n                <Row>\r\n                    {products.map((product) => (\r\n                        <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                            <Product product={product} />\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import {URL} from '../constants/api'\r\nimport {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n    PRODUCT_DETAILS_FAIL,\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n} from '../constants/productConstants'\r\nimport axios from 'axios'\r\n\r\nexport const listProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_LIST_REQUEST,\r\n        })\r\n        const { data } = await axios.get(`${URL}/api/products`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_REQUEST,\r\n        })\r\n        const { data } = await axios.get(`${URL}/api/products/${id}`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// Bootstrap Components\r\nimport { Row, Col, Image, ListGroup, Card, Button, Form } from 'react-bootstrap'\r\n// Components\r\nimport Rating from '../components/Rating'\r\n// Redux Actions\r\nimport { listProductDetails } from '../actions/productActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\n\r\nconst ProductScreen = ({ history, match }) => {\r\n    const [qty, setQty] = useState(1)\r\n\r\n    const dispatch = useDispatch()\r\n    const productDetails = useSelector((state) => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    useEffect(() => {\r\n        dispatch(listProductDetails(match.params.id))\r\n    }, [dispatch, match])\r\n\r\n    const addToCartHandler = () => {\r\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link className='btn btn-secondary my-3' to='/'>\r\n                Go Back\r\n            </Link>\r\n            {loading ? (\r\n                <Loader />\r\n            ) : error ? (\r\n                <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <Image\r\n                            src={product.image}\r\n                            alt={product.name}\r\n                            fluid\r\n                        ></Image>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h3>{product.name}</h3>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Rating\r\n                                    value={product.rating}\r\n                                    text={`${product.numReviews} reviews`}\r\n                                />\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                Price: ${product.price}\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                Description: {product.description}\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <Card>\r\n                            <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Price:</Col>\r\n                                        <Col>\r\n                                            <strong>${product.price}</strong>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Status:</Col>\r\n                                        <Col>\r\n                                            {product.countInStock > 0\r\n                                                ? 'In Stock'\r\n                                                : 'Out of Stock'}\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                {product.countInStock > 0 && (\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Qty</Col>\r\n                                            <Col>\r\n                                                <Form.Control\r\n                                                    as='select'\r\n                                                    value={qty}\r\n                                                    onChange={(e) =>\r\n                                                        setQty(e.target.value)\r\n                                                    }\r\n                                                >\r\n                                                    {[\r\n                                                        ...Array(\r\n                                                            product.countInStock\r\n                                                        ).keys(),\r\n                                                    ].map((p) => (\r\n                                                        <option\r\n                                                            key={p + 1}\r\n                                                            value={p + 1}\r\n                                                        >\r\n                                                            {p + 1}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                                <ListGroup.Item>\r\n                                    <Button\r\n                                        disabled={product.countInStock === 0}\r\n                                        className='btn-block'\r\n                                        type='button'\r\n                                        onClick={addToCartHandler}\r\n                                    >\r\n                                        Add To Cart\r\n                                    </Button>\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n","import axios from 'axios'\r\nimport {URL} from '../constants/api'\r\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD } from '../constants/cartConstants'\r\n\r\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\r\n    const { data } = await axios.get(`${URL}/api/products/${id}`)\r\n    dispatch({\r\n        type: CART_ADD_ITEM,\r\n        payload: {\r\n            product: data._id,\r\n            name: data.name,\r\n            image: data.image,\r\n            price: data.price,\r\n            countInStock: data.countInStock,\r\n            qty,\r\n        },\r\n    })\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\nexport const removeFromCart = (id) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CART_REMOVE_ITEM,\r\n        payload: id,\r\n    })\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\nexport const saveShippingAddress = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: CART_SAVE_SHIPPING_ADDRESS,\r\n        payload: data,\r\n    })\r\n    localStorage.setItem('shippingAddress', JSON.stringify(data))\r\n}\r\n\r\nexport const savePaymentMethod = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: CART_SAVE_PAYMENT_METHOD,\r\n        payload: data,\r\n    })\r\n    localStorage.setItem('paymentMethod', JSON.stringify(data))\r\n}","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n// React Bootstrap\r\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\r\n// Redux state\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// Components\r\nimport Message from '../components/Message'\r\n// Redux Actions\r\nimport { addToCart, removeFromCart } from '../actions/cartActions'\r\n\r\nconst Cart = ({ match, location, history }) => {\r\n    const productId = match.params.id\r\n\r\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector((state) => state.cart)\r\n\r\n    const { cartItems } = cart\r\n\r\n    useEffect(() => {\r\n        if (productId) {\r\n            dispatch(addToCart(productId, qty))\r\n        }\r\n    }, [dispatch, productId, qty])\r\n\r\n    const removeFromCartHandler = (id) => {\r\n        // console.log('remove')\r\n        dispatch(removeFromCart(id))\r\n    }\r\n\r\n    const checkoutHandler = () => {\r\n        history.push('/login?redirect=shipping')\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={8}>\r\n                <h2>Shopping Cart</h2>\r\n                {cartItems.length === 0 ? (\r\n                    <Message>\r\n                        Your cart is empty <Link to='/'>Go back</Link>\r\n                    </Message>\r\n                ) : (\r\n                    <ListGroup variant='flush'>\r\n                        {cartItems.map((item) => (\r\n                            <ListGroup.Item key={item.product}>\r\n                                <Row>\r\n                                    <Col md={2}>\r\n                                        <Image\r\n                                            src={item.image}\r\n                                            alt={item.name}\r\n                                            fluid\r\n                                            rounded\r\n                                        />\r\n                                    </Col>\r\n                                    <Col md={3}>\r\n                                        <Link to={`/product/${item.product}`}>\r\n                                            {item.name}\r\n                                        </Link>\r\n                                    </Col>\r\n                                    <Col md={2}>${item.price}</Col>\r\n                                    <Col md={2}>\r\n                                        <Form.Control\r\n                                            as='select'\r\n                                            value={item.qty}\r\n                                            onChange={(e) =>\r\n                                                dispatch(\r\n                                                    addToCart(\r\n                                                        item.product,\r\n                                                        Number(e.target.value)\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        >\r\n                                            {[\r\n                                                ...Array(\r\n                                                    item.countInStock\r\n                                                ).keys(),\r\n                                            ].map((p) => (\r\n                                                <option\r\n                                                    key={p + 1}\r\n                                                    value={p + 1}\r\n                                                >\r\n                                                    {p + 1}\r\n                                                </option>\r\n                                            ))}\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                    <Col md={2}>\r\n                                        <Button\r\n                                            type='button'\r\n                                            variant='light'\r\n                                            onClick={() =>\r\n                                                removeFromCartHandler(\r\n                                                    item.product\r\n                                                )\r\n                                            }\r\n                                        >\r\n                                            <i className='fas fa-trash'></i>\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                )}\r\n            </Col>\r\n            <Col md={4}>\r\n                <Card>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>\r\n                                Subtotal (\r\n                                {cartItems.reduce(\r\n                                    (acc, item) => acc + item.qty,\r\n                                    0\r\n                                )}\r\n                                ) items\r\n                            </h2>\r\n                            $\r\n                            {cartItems\r\n                                .reduce(\r\n                                    (acc, item) => acc + item.qty * item.price,\r\n                                    0\r\n                                )\r\n                                .toFixed(2)}\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Button\r\n                                type='button'\r\n                                className='btn-block'\r\n                                disabled={cartItems.length === 0}\r\n                                onClick={checkoutHandler}\r\n                            >\r\n                                Proceed to checkout\r\n                            </Button>\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nconst FormContainer = ({ children }) => {\r\n    return (\r\n        <Container>\r\n            <Row className='justify-content-md-center'>\r\n                <Col xs={12} md={6}>\r\n                    {children}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default FormContainer\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n// Bootstrap Components\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// UI Components\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\n// Redux Actions\r\nimport { login } from '../actions/userActions'\r\n\r\nconst Login = ({ location, history }) => {\r\n    // State to hold email and password\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // Get user login info from Redux state\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { loading, error, userInfo } = userLogin\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    useEffect(() => {\r\n        // If there is user info then redirect\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    // Handler that logs in the user\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        // Dispatch login\r\n        dispatch(login(email, password))\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        type='email'\r\n                        placeholder='email@example.com'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        placeholder='Enter password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Button type='submit' variant='primary'>\r\n                    Sign In\r\n                </Button>\r\n            </Form>\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    New Customer{' '}\r\n                    <Link\r\n                        to={\r\n                            redirect\r\n                                ? `/register?redirect=${redirect}`\r\n                                : '/register'\r\n                        }\r\n                    >\r\n                        Register\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n// Bootstrap Components\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// UI Components\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\n// Redux Actions\r\nimport { register } from '../actions/userActions'\r\n\r\nconst Register = ({ location, history }) => {\r\n    // State to hold email and password\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // Get user login info from Redux state\r\n    const userRegister = useSelector((state) => state.userRegister)\r\n    const { loading, error, userInfo } = userRegister\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    useEffect(() => {\r\n        // If there is user info then redirect\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    // Handler that logs in the user\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        // Check if passwords are the same\r\n        if (password !== confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            // Dispatch Register\r\n            dispatch(register(name, email, password))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign Up</h1>\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='Name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        type='email'\r\n                        placeholder='email@example.com'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        placeholder='Enter password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId='confirmPassword'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        placeholder='Confirm password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n            </Form>\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account?{' '}\r\n                    <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}\r\n                    >\r\n                        Login\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","import React, { useState, useEffect } from 'react'\r\n// Bootstrap Components\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// UI Components\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\n// Redux Actions\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { listUserOrders } from '../actions/orderActions'\r\n\r\nconst Profile = ({ history }) => {\r\n    // State to hold email and password\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // Get user details from Redux store\r\n    const userDetails = useSelector((state) => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    // Get user token from Redux store\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    // Get update status on user info\r\n    const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    // Get user orders from Redux store\r\n    const orderListUser = useSelector((state) => state.orderListUser)\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListUser\r\n\r\n    useEffect(() => {\r\n        // If there is NO user info then redirect to login page\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!user.name) {\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listUserOrders())\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [history, userInfo, dispatch, user])\r\n\r\n    // Handler that logs in the user\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        // Check if passwords are the same\r\n        if (password !== confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            // Dispatch update profile reducer\r\n            dispatch(updateUserProfile({ id: user._id, name, email, password }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n                <h2>User Profile</h2>\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {success && (\r\n                    <Message variant='success'>Profile Updated</Message>\r\n                )}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler}>\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            type='text'\r\n                            placeholder='Name'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            type='email'\r\n                            placeholder='email@example.com'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                            type='password'\r\n                            placeholder='Enter password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='confirmPassword'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n                            type='password'\r\n                            placeholder='Confirm password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                    </Button>\r\n                </Form>\r\n            </Col>\r\n            <Col md={9}>\r\n                <h2>My Orders</h2>\r\n                {loadingOrders ? (\r\n                    <Loader />\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                    <Table\r\n                        striped\r\n                        bordered\r\n                        hover\r\n                        responsive\r\n                        className='table-sm'\r\n                    >\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>DATE</th>\r\n                                <th>TOTAL</th>\r\n                                <th>PAID</th>\r\n                                <th>DELIVERED</th>\r\n                                <th>DETAILS</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {orders.map((order) => (\r\n                                <tr key={order._id}>\r\n                                    <td>{order._id}</td>\r\n                                    <td>{order.createdAt.substring(0, 10)}</td>\r\n                                    <td>${order.totalPrice}</td>\r\n                                    <td>\r\n                                        {order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                            <i\r\n                                                className='fas fa-times'\r\n                                                style={{ color: 'red' }}\r\n                                            ></i>\r\n                                        )}\r\n                                    </td>\r\n                                    <td>\r\n                                        {order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                            <i\r\n                                                className='fas fa-times'\r\n                                                style={{ color: 'red' }}\r\n                                            ></i>\r\n                                        )}\r\n                                    </td>\r\n                                    <td>\r\n                                        <LinkContainer\r\n                                            to={`/order/${order._id}`}\r\n                                        >\r\n                                            <Button\r\n                                                className='btn-sm'\r\n                                                variant='light'\r\n                                            >\r\n                                                Details\r\n                                            </Button>\r\n                                        </LinkContainer>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import { URL } from '../constants/api'\r\nimport {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_LIST_USER_REQUEST,\r\n    ORDER_LIST_USER_SUCCESS,\r\n    ORDER_LIST_USER_FAIL,\r\n} from '../constants/orderConstants'\r\nimport axios from 'axios'\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST,\r\n        })\r\n\r\n        // Get user login and user info\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        // Header to send with the request\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        // Make request to server and get the response data\r\n        const { data } = await axios.post(`${URL}/api/orders`, order, config)\r\n\r\n        // Dispatch user order success after making the request\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const getOrderDetails = (orderId) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST,\r\n        })\r\n\r\n        // Get user login to get the bearertoken\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        // Header to send with the request\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        // Make request to server and get the response data\r\n        const { data } = await axios.get(`${URL}/api/orders/${orderId}`, config)\r\n\r\n        // Dispatch user order success after making the request\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const payOrder = (orderId, paymentResult) => async (\r\n    dispatch,\r\n    getState\r\n) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST,\r\n        })\r\n\r\n        // Get user login to get the bearer token\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        // Header to send with the request\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        // Make request to server and get the response data\r\n        const { data } = await axios.put(\r\n            `${URL}/api/orders/${orderId}/pay`,\r\n            paymentResult,\r\n            config\r\n        )\r\n\r\n        // Dispatch user order pay success after making the request\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listUserOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_USER_REQUEST,\r\n        })\r\n\r\n        // Get user login to get the bearer token\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        // Header to send with the request\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        // Make request to server and get the response data\r\n        const { data } = await axios.get(`${URL}/api/orders/myorders`, config)\r\n\r\n        // Dispatch user order pay success after making the request\r\n        dispatch({\r\n            type: ORDER_LIST_USER_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_USER_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nconst CheckoutSteps = ({ step1, step2, step3, step4 }) => {\r\n    return (\r\n        <Nav className='justify-content-center mb-4'>\r\n            <Nav.Item>\r\n                {\r\n                    step1 ? (\r\n                        <LinkContainer to=\"/login\">\r\n                            <Nav.Link>Sign In</Nav.Link>\r\n                        </LinkContainer>\r\n                    ) : <Nav.Link disabled>Sign In</Nav.Link>\r\n                }\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                {\r\n                    step2 ? (\r\n                        <LinkContainer to=\"/shipping\">\r\n                            <Nav.Link>Shipping</Nav.Link>\r\n                        </LinkContainer>\r\n                    ) : <Nav.Link disabled>Shipping</Nav.Link>\r\n                }\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                {\r\n                    step3 ? (\r\n                        <LinkContainer to=\"/payment\">\r\n                            <Nav.Link>Payment</Nav.Link>\r\n                        </LinkContainer>\r\n                    ) : <Nav.Link disabled>Payment</Nav.Link>\r\n                }\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                {\r\n                    step4 ? (\r\n                        <LinkContainer to=\"/place-order\">\r\n                            <Nav.Link>Place Order</Nav.Link>\r\n                        </LinkContainer>\r\n                    ) : <Nav.Link disabled>Place Order</Nav.Link>\r\n                }\r\n            </Nav.Item>\r\n        </Nav>\r\n    )\r\n}\r\n\r\nexport default CheckoutSteps\r\n","import React, { useState } from 'react'\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\n\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\n\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\n\r\n\r\nconst Shipping = ({ history }) => {\r\n\r\n    // Get shipping address from global state\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n        // Move to the payments page\r\n        history.push(\"/payment\")\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 />\r\n            <h1>Shipping</h1>\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='Address'\r\n                        value={address}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                        required\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId='city'>\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='City'\r\n                        value={city}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                        required\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId='postalCode'>\r\n                    <Form.Label>Postal Code</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='Postal Code'\r\n                        value={postalCode}\r\n                        onChange={(e) => setPostalCode(e.target.value)}\r\n                        required\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId='country'>\r\n                    <Form.Label>Country</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='Country'\r\n                        value={country}\r\n                        onChange={(e) => setCountry(e.target.value)}\r\n                        required\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Button type=\"submit\" variant=\"primary\">\r\n                    Continue\r\n                </Button>\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default Shipping\r\n","import React, { useState } from 'react'\r\nimport {Form, Button, Col} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\n\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\n\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\n\r\n\r\nconst Payment = ({ history }) => {\r\n\r\n    // Get shipping address from global state\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    // If theres no shipping address redirect user to shipping\r\n    if(!shippingAddress){\r\n        history.push('/shipping')\r\n    }\r\n\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n        // Move to the place order page\r\n        history.push(\"/place-order\")\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 step3 />\r\n            <h1>Payment Method</h1>\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group>\r\n                    <Form.Label as='legen'>Select Method</Form.Label>\r\n                    <Col>\r\n                        <Form.Check type='radio' label='PayPal or Credit Card' id='PayPal' name='paymentMethod' value='PayPal' checked onChange={(e) => setPaymentMethod(e.target.value)}></Form.Check>\r\n                        {/* <Form.Check type='radio' label='Stripe' id='Stripe' name='paymentMethod' value='Stripe' checked onChange={(e) => setPaymentMethod(e.target.value)}></Form.Check> */}\r\n                    </Col>\r\n                </Form.Group>\r\n                <Button type=\"submit\" variant=\"primary\">\r\n                    Continue\r\n                </Button>\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default Payment\r\n","import React, { useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// Create order action\r\nimport { createOrder } from '../actions/orderActions'\r\n\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\nimport { USER_DETAILS_RESET } from '../constants/userConstants'\r\n\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\n\r\nconst PlaceOrder = ({ history }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    // Get items from the cart\r\n    const cart = useSelector((state) => state.cart)\r\n\r\n    const addDecimals = (num) => {\r\n        return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    // Calculate prices\r\n    cart.itemsPrice = addDecimals(\r\n        cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    )\r\n\r\n    // Calculate shipping prices\r\n    cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 10)\r\n\r\n    // Calculate tax\r\n    cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\r\n\r\n    // Total price\r\n    cart.totalPrice = (\r\n        Number(cart.itemsPrice) +\r\n        Number(cart.shippingPrice) +\r\n        Number(cart.taxPrice)\r\n    ).toFixed(2)\r\n\r\n    const orderCreate = useSelector((state) => state.createOrder)\r\n    const { order, success, error } = orderCreate\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            history.push(`/order/${order._id}`)\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n            dispatch({ type: USER_DETAILS_RESET })\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [history, success])\r\n\r\n    const placeOrderHandler = () => {\r\n        console.log('Placed order')\r\n        dispatch(\r\n            createOrder({\r\n                orderItems: cart.cartItems,\r\n                shippingAddress: cart.shippingAddress,\r\n                paymentMethod: cart.paymentMethod,\r\n                itemsPrice: cart.itemsPrice,\r\n                shippingPrice: cart.shippingPrice,\r\n                taxPrice: cart.taxPrice,\r\n                totalPrice: cart.totalPrice,\r\n            })\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p>\r\n                                <strong>Address: </strong>\r\n                                {cart.shippingAddress.address},{' '}\r\n                                {cart.shippingAddress.city}{' '}\r\n                                {cart.shippingAddress.postalCode},{' '}\r\n                                {cart.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <strong>Method: </strong>\r\n                            {cart.paymentMethod}\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length < 0 ? (\r\n                                <Message>Your cart is empty</Message>\r\n                            ) : (\r\n                                <ListGroup variant='flush'>\r\n                                    {cart.cartItems.map((item, index) => (\r\n                                        <ListGroup.Item key={index}>\r\n                                            <Row>\r\n                                                <Col md={1}>\r\n                                                    <Image\r\n                                                        src={item.image}\r\n                                                        alt={item.name}\r\n                                                        fluid\r\n                                                        rounded\r\n                                                    />\r\n                                                </Col>\r\n                                                <Col>\r\n                                                    <Link\r\n                                                        to={`/product/${item.product}`}\r\n                                                    >\r\n                                                        {item.name}\r\n                                                    </Link>\r\n                                                </Col>\r\n                                                <Col md={4}>\r\n                                                    {item.qty} x $ {item.price}{' '}\r\n                                                    = $ {item.qty * item.price}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    ))}\r\n                                </ListGroup>\r\n                            )}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items</Col>\r\n                                    <Col>${cart.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping</Col>\r\n                                    <Col>${cart.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax</Col>\r\n                                    <Col>${cart.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total</Col>\r\n                                    <Col>${cart.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                {error && (\r\n                                    <Message variant='danger'>{error}</Message>\r\n                                )}\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn-block'\r\n                                    disabled={cart.cartItems === 0}\r\n                                    onClick={placeOrderHandler}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlaceOrder\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { Link } from 'react-router-dom'\r\nimport { URL } from '../constants/api'\r\nimport axios from 'axios'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { ORDER_PAY_RESET } from '../constants/orderConstants'\r\n\r\n// Get order details actions\r\nimport { getOrderDetails, payOrder } from '../actions/orderActions'\r\n\r\nconst Order = ({ match, history }) => {\r\n    // Get order id parameter from URL\r\n    const orderId = match.params.id\r\n\r\n    // Boolean used to determine if the PayPal SDK has loaded\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // Get order details from state\r\n    const orderDetails = useSelector((state) => state.orderDetails)\r\n    const { order, loading, error } = orderDetails\r\n\r\n    // Get order payment status\r\n    const orderPay = useSelector((state) => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    if (!loading) {\r\n        const addDecimals = (num) => {\r\n            return (Math.round(num * 100) / 100).toFixed(2)\r\n        }\r\n\r\n        order.itemsPrice = addDecimals(\r\n            order.orderItems.reduce(\r\n                (acc, item) => acc + item.price * item.qty,\r\n                0\r\n            )\r\n        )\r\n\r\n        order.shippingPrice = addDecimals(order.shippingPrice)\r\n\r\n        order.taxPrice = addDecimals(order.taxPrice)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const addPayPalScript = async () => {\r\n            const { data: clientId } = await axios.get(`${URL}/api/config/paypal`)\r\n            const script = document.createElement('script')\r\n            script.type = 'text/javascript'\r\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}&currency=USD`\r\n            script.async = true\r\n            script.onload = () => {\r\n                setSdkReady(true)\r\n            }\r\n            document.body.appendChild(script)\r\n        }\r\n\r\n        if (!order || successPay || order._id !== orderId) {\r\n            dispatch({ type: ORDER_PAY_RESET })\r\n            dispatch(getOrderDetails(orderId))\r\n        } else if (!order.isPaid) {\r\n            if (!window.paypal) {\r\n                addPayPalScript()\r\n            } else {\r\n                setSdkReady(true)\r\n            }\r\n        }\r\n    }, [dispatch, orderId, order, successPay])\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n        console.log(paymentResult)\r\n        // Update status of order to paid\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    return loading ? (\r\n        <Loader />\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n        <>\r\n            <h1>Order {orderId}</h1>\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p>\r\n                                <strong>Name: </strong>\r\n                                {order.user.name}\r\n                            </p>\r\n                            <p>\r\n                                <strong>Email: </strong>\r\n                                {order.user.email}\r\n                            </p>\r\n                            <p>\r\n                                <strong>Address: </strong>\r\n                                {order.shippingAddress.address},{' '}\r\n                                {order.shippingAddress.city}{' '}\r\n                                {order.shippingAddress.postalCode},{' '}\r\n                                {order.shippingAddress.country}\r\n                                {order.isDelivered ? (\r\n                                    <Message variant='success'>\r\n                                        Delivered on {order.deliveredAt}\r\n                                    </Message>\r\n                                ) : (\r\n                                    <Message variant='danger'>\r\n                                        Not Delivered\r\n                                    </Message>\r\n                                )}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {order.paymentMethod}\r\n                                {order.isPaid ? (\r\n                                    <Message variant='success'>\r\n                                        Paid on {order.paidAt}\r\n                                    </Message>\r\n                                ) : (\r\n                                    <Message variant='danger'>Not Paid</Message>\r\n                                )}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {order.orderItems.length === 0 ? (\r\n                                <Message>Order is empty</Message>\r\n                            ) : (\r\n                                <ListGroup variant='flush'>\r\n                                    {order.orderItems.map((item, index) => (\r\n                                        <ListGroup.Item key={index}>\r\n                                            <Row>\r\n                                                <Col md={1}>\r\n                                                    <Image\r\n                                                        src={item.image}\r\n                                                        alt={item.name}\r\n                                                        fluid\r\n                                                        rounded\r\n                                                    />\r\n                                                </Col>\r\n                                                <Col>\r\n                                                    <Link\r\n                                                        to={`/product/${item.product}`}\r\n                                                    >\r\n                                                        {item.name}\r\n                                                    </Link>\r\n                                                </Col>\r\n                                                <Col md={4}>\r\n                                                    {item.qty} x $ {item.price}{' '}\r\n                                                    = $ {item.qty * item.price}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    ))}\r\n                                </ListGroup>\r\n                            )}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items</Col>\r\n                                    <Col>${order.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping</Col>\r\n                                    <Col>${order.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax</Col>\r\n                                    <Col>${order.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total</Col>\r\n                                    <Col>${order.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            {!order.isPaid && (\r\n                                <ListGroup.Item>\r\n                                    {loadingPay && <Loader />}\r\n                                    {!sdkReady ? (\r\n                                        <Loader />\r\n                                    ) : (\r\n                                        <PayPalButton\r\n                                            amount={order.totalPrice}\r\n                                            onSuccess={successPaymentHandler}\r\n                                        />\r\n                                    )}\r\n                                </ListGroup.Item>\r\n                            )}\r\n                            <ListGroup.Item>\r\n                                {error && (\r\n                                    <Message variant='danger'>{error}</Message>\r\n                                )}\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Order\r\n","import { createBrowserHistory } from 'history'\r\nexport default createBrowserHistory()","import React from 'react'\r\nimport { Container } from 'react-bootstrap'\r\n// Routing\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\n\r\n// Components\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\n\r\n// Screens\r\nimport HomeScreen from './screens/Home'\r\nimport ProductScreen from './screens/Product'\r\nimport CartScreen from './screens/Cart'\r\nimport LoginScreen from './screens/Login'\r\nimport RegisterScreen from './screens/Register'\r\nimport ProfileScreen from './screens/Profile'\r\nimport ShippingScreen from './screens/Shipping'\r\nimport PaymentScreen from './screens/Payment'\r\nimport PlaceOrderScreen from './screens/PlaceOrder'\r\nimport OrderScreen from './screens/Order'\r\n\r\n// History\r\nimport history from './utils/history'\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router history={history}>\r\n            <Header />\r\n            <main className='py-3'>\r\n                <Container>\r\n                    <Route path='/order/:id' component={OrderScreen} />\r\n                    <Route path='/place-order' component={PlaceOrderScreen} />\r\n                    <Route path='/payment' component={PaymentScreen} />\r\n                    <Route path='/shipping' component={ShippingScreen} />\r\n                    <Route path='/register' component={RegisterScreen} />\r\n                    <Route path='/profile' component={ProfileScreen} />\r\n                    <Route path='/login' component={LoginScreen} />\r\n                    <Route path='/product/:id' component={ProductScreen} />\r\n                    <Route path='/cart/:id?' component={CartScreen} />\r\n                    <Route path='/' component={HomeScreen} exact />\r\n                </Container>\r\n            </main>\r\n            <Footer />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\nimport './bootstrap.min.css'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}